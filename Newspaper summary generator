import nltk
from newspaper import Article
from nltk.tokenize import sent_tokenize
from nltk.corpus import stopwords
from nltk.cluster.util import cosine_distance
import numpy as np
import networkx as nx

nltk.download('punkt')
nltk.download('stopwords')

def read_article(url):
    article = Article(url)
    article.download()
    article.parse()
    return article.text

def sentence_similarity(sent1, sent2, stopwords=None):
    if stopwords is None:
        stopwords = []
 
    sent1 = [w.lower() for w in sent1]
    sent2 = [w.lower() for w in sent2]
 
    all_words = list(set(sent1 + sent2))
 
    vector1 = [0] * len(all_words)
    vector2 = [0] * len(all_words)
 
    for w in sent1:
        if w in stopwords:
            continue
        vector1[all_words.index(w)] += 1
 
    for w in sent2:
        if w in stopwords:
            continue
        vector2[all_words.index(w)] += 1
 
    return 1 - cosine_distance(vector1, vector2)

def build_similarity_matrix(sentences, stop_words):
    similarity_matrix = np.zeros((len(sentences), len(sentences)))
 
    for idx1 in range(len(sentences)):
        for idx2 in range(len(sentences)):
            if idx1 == idx2: #ignore if both are same sentences
                continue 
            similarity_matrix[idx1][idx2] = sentence_similarity(sentences[idx1], sentences[idx2], stop_words)
 
    return similarity_matrix

def generate_summary(article_url, top_n=5):
    stop_words = stopwords.words('english')
    summarize_text = []

    # Step 1 - Read the article
    article_content = read_article(article_url)

    # Step 2 - Tokenize the article into sentences
    sentences = sent_tokenize(article_content)

    # Step 3 - Generate Sentence Similarity Matrix
    sentence_similarity_martix = build_similarity_matrix(sentences, stop_words)

    # Step 4 - Rank sentences in Similarity Matrix
    sentence_similarity_graph = nx.from_numpy_array(sentence_similarity_martix)
    scores = nx.pagerank(sentence_similarity_graph)

    # Step 5 - Sort the rank and pick top sentences
    ranked_sentence = sorted(((scores[i],s) for i,s in enumerate(sentences)), reverse=True)    

    # Step 6 - Pick top N sentences
    for i in range(top_n):
        summarize_text.append("".join(ranked_sentence[i][1]))

    return " ".join(summarize_text)

# Example usage
url = "https://www.hindustantimes.com/india-news/can-i-speak-in-hindi-pm-modi-talks-about-heart-to-heart-bond-in-karnataka-devanagere-101714302685845.html"
summary = generate_summary(url, top_n=3)
print(summary)
